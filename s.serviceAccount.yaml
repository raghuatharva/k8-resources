# this will just create user , it wont automatically reads sensitive info
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-reader 
  namespace: expense
---
#create a role of what the service account should do
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: expense
  name: secret-role
rules:
- apiGroups: [""] # "" indicates the core API group .. v1 is the core version, like pods ,service,configmap etc
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "secret-reader " to read secrets in the "expense" namespace.
# You need to already have a Role named "secret-role" in that namespace.
kind: RoleBinding
metadata:
  name: read-pods
  namespace: default
subjects:
# You can specify more than one "subject" ; more than one user can be assigned to the same role
- kind: ServiceAccount
  name: secret-reader # "name" is case sensitive
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: secret-role # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
#now the service account is created and its assigned for a role . what role ? to fetch secrets

#assume that you created a secret before or some admin created it ; its example is 
# apiVersion: v1
# kind: Secret
# metadata:
#   name: db-credentials
#   namespace: default
# type: Opaque
# data:
#   DB_PASSWORD: cGFzc3dvcmQ=  # Base64 encoded value of "password"
#################################################################
#TO fetch that 

apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: expense
spec:
  serviceAccountName: secret-reader  # Assign ServiceAccount
  containers:
  - name: nginx
    image: nginx:stable-perl
    resources:
      limits:
        memory: 180Mi
        cpu: 100m
      requests:
        cpu: 100m
        memory: 200Mi
    env:
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: password



